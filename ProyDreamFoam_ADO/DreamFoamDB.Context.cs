//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProyDreamFoam_ADO
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DreamFoam_DBEntities : DbContext
    {
        public DreamFoam_DBEntities()
            : base("name=DreamFoam_DBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Tb_Area> Tb_Area { get; set; }
        public virtual DbSet<Tb_Calendario2024> Tb_Calendario2024 { get; set; }
        public virtual DbSet<Tb_Cargo> Tb_Cargo { get; set; }
        public virtual DbSet<Tb_Diario> Tb_Diario { get; set; }
        public virtual DbSet<Tb_Documento> Tb_Documento { get; set; }
        public virtual DbSet<Tb_Empleado> Tb_Empleado { get; set; }
        public virtual DbSet<Tb_Feriados> Tb_Feriados { get; set; }
        public virtual DbSet<Tb_Horario> Tb_Horario { get; set; }
        public virtual DbSet<Tb_Marcas> Tb_Marcas { get; set; }
        public virtual DbSet<Tb_Sede> Tb_Sede { get; set; }
        public virtual DbSet<Tb_UserSystem> Tb_UserSystem { get; set; }
    
        public virtual int usp_ActualizarDiario(Nullable<int> codDiar, Nullable<System.DateTime> fecha, Nullable<int> empleado, Nullable<int> horario, Nullable<System.TimeSpan> hIngreso, Nullable<System.TimeSpan> hSalida, Nullable<System.TimeSpan> hora1, Nullable<System.TimeSpan> hora2, Nullable<System.TimeSpan> hora3, Nullable<System.TimeSpan> hora4, Nullable<System.TimeSpan> ingrTard, Nullable<System.TimeSpan> exeRefr, Nullable<System.TimeSpan> exeJornd, string observ, string usu_UltMod)
        {
            var codDiarParameter = codDiar.HasValue ?
                new ObjectParameter("codDiar", codDiar) :
                new ObjectParameter("codDiar", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var empleadoParameter = empleado.HasValue ?
                new ObjectParameter("empleado", empleado) :
                new ObjectParameter("empleado", typeof(int));
    
            var horarioParameter = horario.HasValue ?
                new ObjectParameter("horario", horario) :
                new ObjectParameter("horario", typeof(int));
    
            var hIngresoParameter = hIngreso.HasValue ?
                new ObjectParameter("hIngreso", hIngreso) :
                new ObjectParameter("hIngreso", typeof(System.TimeSpan));
    
            var hSalidaParameter = hSalida.HasValue ?
                new ObjectParameter("hSalida", hSalida) :
                new ObjectParameter("hSalida", typeof(System.TimeSpan));
    
            var hora1Parameter = hora1.HasValue ?
                new ObjectParameter("hora1", hora1) :
                new ObjectParameter("hora1", typeof(System.TimeSpan));
    
            var hora2Parameter = hora2.HasValue ?
                new ObjectParameter("hora2", hora2) :
                new ObjectParameter("hora2", typeof(System.TimeSpan));
    
            var hora3Parameter = hora3.HasValue ?
                new ObjectParameter("hora3", hora3) :
                new ObjectParameter("hora3", typeof(System.TimeSpan));
    
            var hora4Parameter = hora4.HasValue ?
                new ObjectParameter("hora4", hora4) :
                new ObjectParameter("hora4", typeof(System.TimeSpan));
    
            var ingrTardParameter = ingrTard.HasValue ?
                new ObjectParameter("ingrTard", ingrTard) :
                new ObjectParameter("ingrTard", typeof(System.TimeSpan));
    
            var exeRefrParameter = exeRefr.HasValue ?
                new ObjectParameter("exeRefr", exeRefr) :
                new ObjectParameter("exeRefr", typeof(System.TimeSpan));
    
            var exeJorndParameter = exeJornd.HasValue ?
                new ObjectParameter("exeJornd", exeJornd) :
                new ObjectParameter("exeJornd", typeof(System.TimeSpan));
    
            var observParameter = observ != null ?
                new ObjectParameter("observ", observ) :
                new ObjectParameter("observ", typeof(string));
    
            var usu_UltModParameter = usu_UltMod != null ?
                new ObjectParameter("usu_UltMod", usu_UltMod) :
                new ObjectParameter("usu_UltMod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ActualizarDiario", codDiarParameter, fechaParameter, empleadoParameter, horarioParameter, hIngresoParameter, hSalidaParameter, hora1Parameter, hora2Parameter, hora3Parameter, hora4Parameter, ingrTardParameter, exeRefrParameter, exeJorndParameter, observParameter, usu_UltModParameter);
        }
    
        public virtual int usp_ActualizarEmpleado(Nullable<int> codEmpleado, string numroDoc, string tipoDoc, string apellidos, string nombres, Nullable<System.DateTime> fecNacimiento, string genero, string correo, string direccion, Nullable<int> telefono, Nullable<System.DateTime> fecIngreso, Nullable<int> codCargo, Nullable<int> codArea, Nullable<int> codSede, Nullable<int> codHorario, byte[] foto, string usu_UltMod, Nullable<int> estado)
        {
            var codEmpleadoParameter = codEmpleado.HasValue ?
                new ObjectParameter("codEmpleado", codEmpleado) :
                new ObjectParameter("codEmpleado", typeof(int));
    
            var numroDocParameter = numroDoc != null ?
                new ObjectParameter("numroDoc", numroDoc) :
                new ObjectParameter("numroDoc", typeof(string));
    
            var tipoDocParameter = tipoDoc != null ?
                new ObjectParameter("tipoDoc", tipoDoc) :
                new ObjectParameter("tipoDoc", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("nombres", nombres) :
                new ObjectParameter("nombres", typeof(string));
    
            var fecNacimientoParameter = fecNacimiento.HasValue ?
                new ObjectParameter("fecNacimiento", fecNacimiento) :
                new ObjectParameter("fecNacimiento", typeof(System.DateTime));
    
            var generoParameter = genero != null ?
                new ObjectParameter("genero", genero) :
                new ObjectParameter("genero", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(int));
    
            var fecIngresoParameter = fecIngreso.HasValue ?
                new ObjectParameter("fecIngreso", fecIngreso) :
                new ObjectParameter("fecIngreso", typeof(System.DateTime));
    
            var codCargoParameter = codCargo.HasValue ?
                new ObjectParameter("codCargo", codCargo) :
                new ObjectParameter("codCargo", typeof(int));
    
            var codAreaParameter = codArea.HasValue ?
                new ObjectParameter("codArea", codArea) :
                new ObjectParameter("codArea", typeof(int));
    
            var codSedeParameter = codSede.HasValue ?
                new ObjectParameter("codSede", codSede) :
                new ObjectParameter("codSede", typeof(int));
    
            var codHorarioParameter = codHorario.HasValue ?
                new ObjectParameter("codHorario", codHorario) :
                new ObjectParameter("codHorario", typeof(int));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("foto", foto) :
                new ObjectParameter("foto", typeof(byte[]));
    
            var usu_UltModParameter = usu_UltMod != null ?
                new ObjectParameter("usu_UltMod", usu_UltMod) :
                new ObjectParameter("usu_UltMod", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ActualizarEmpleado", codEmpleadoParameter, numroDocParameter, tipoDocParameter, apellidosParameter, nombresParameter, fecNacimientoParameter, generoParameter, correoParameter, direccionParameter, telefonoParameter, fecIngresoParameter, codCargoParameter, codAreaParameter, codSedeParameter, codHorarioParameter, fotoParameter, usu_UltModParameter, estadoParameter);
        }
    
        public virtual int usp_ActualizarHorario(Nullable<int> codHorario, string desHorario, Nullable<System.TimeSpan> ingLUN, Nullable<System.TimeSpan> salLUN, Nullable<System.TimeSpan> ingMAR, Nullable<System.TimeSpan> salMAR, Nullable<System.TimeSpan> ingMIE, Nullable<System.TimeSpan> salMIE, Nullable<System.TimeSpan> ingJUE, Nullable<System.TimeSpan> salJUE, Nullable<System.TimeSpan> ingVIE, Nullable<System.TimeSpan> salVIE, Nullable<System.TimeSpan> ingSAB, Nullable<System.TimeSpan> salSAB, Nullable<System.TimeSpan> ingDOM, Nullable<System.TimeSpan> salDOM, Nullable<int> refriger, Nullable<int> tolernc, Nullable<int> diaDesc, string usu_UltMod)
        {
            var codHorarioParameter = codHorario.HasValue ?
                new ObjectParameter("codHorario", codHorario) :
                new ObjectParameter("codHorario", typeof(int));
    
            var desHorarioParameter = desHorario != null ?
                new ObjectParameter("desHorario", desHorario) :
                new ObjectParameter("desHorario", typeof(string));
    
            var ingLUNParameter = ingLUN.HasValue ?
                new ObjectParameter("ingLUN", ingLUN) :
                new ObjectParameter("ingLUN", typeof(System.TimeSpan));
    
            var salLUNParameter = salLUN.HasValue ?
                new ObjectParameter("salLUN", salLUN) :
                new ObjectParameter("salLUN", typeof(System.TimeSpan));
    
            var ingMARParameter = ingMAR.HasValue ?
                new ObjectParameter("ingMAR", ingMAR) :
                new ObjectParameter("ingMAR", typeof(System.TimeSpan));
    
            var salMARParameter = salMAR.HasValue ?
                new ObjectParameter("salMAR", salMAR) :
                new ObjectParameter("salMAR", typeof(System.TimeSpan));
    
            var ingMIEParameter = ingMIE.HasValue ?
                new ObjectParameter("ingMIE", ingMIE) :
                new ObjectParameter("ingMIE", typeof(System.TimeSpan));
    
            var salMIEParameter = salMIE.HasValue ?
                new ObjectParameter("salMIE", salMIE) :
                new ObjectParameter("salMIE", typeof(System.TimeSpan));
    
            var ingJUEParameter = ingJUE.HasValue ?
                new ObjectParameter("ingJUE", ingJUE) :
                new ObjectParameter("ingJUE", typeof(System.TimeSpan));
    
            var salJUEParameter = salJUE.HasValue ?
                new ObjectParameter("salJUE", salJUE) :
                new ObjectParameter("salJUE", typeof(System.TimeSpan));
    
            var ingVIEParameter = ingVIE.HasValue ?
                new ObjectParameter("ingVIE", ingVIE) :
                new ObjectParameter("ingVIE", typeof(System.TimeSpan));
    
            var salVIEParameter = salVIE.HasValue ?
                new ObjectParameter("salVIE", salVIE) :
                new ObjectParameter("salVIE", typeof(System.TimeSpan));
    
            var ingSABParameter = ingSAB.HasValue ?
                new ObjectParameter("ingSAB", ingSAB) :
                new ObjectParameter("ingSAB", typeof(System.TimeSpan));
    
            var salSABParameter = salSAB.HasValue ?
                new ObjectParameter("salSAB", salSAB) :
                new ObjectParameter("salSAB", typeof(System.TimeSpan));
    
            var ingDOMParameter = ingDOM.HasValue ?
                new ObjectParameter("ingDOM", ingDOM) :
                new ObjectParameter("ingDOM", typeof(System.TimeSpan));
    
            var salDOMParameter = salDOM.HasValue ?
                new ObjectParameter("salDOM", salDOM) :
                new ObjectParameter("salDOM", typeof(System.TimeSpan));
    
            var refrigerParameter = refriger.HasValue ?
                new ObjectParameter("refriger", refriger) :
                new ObjectParameter("refriger", typeof(int));
    
            var tolerncParameter = tolernc.HasValue ?
                new ObjectParameter("tolernc", tolernc) :
                new ObjectParameter("tolernc", typeof(int));
    
            var diaDescParameter = diaDesc.HasValue ?
                new ObjectParameter("diaDesc", diaDesc) :
                new ObjectParameter("diaDesc", typeof(int));
    
            var usu_UltModParameter = usu_UltMod != null ?
                new ObjectParameter("usu_UltMod", usu_UltMod) :
                new ObjectParameter("usu_UltMod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ActualizarHorario", codHorarioParameter, desHorarioParameter, ingLUNParameter, salLUNParameter, ingMARParameter, salMARParameter, ingMIEParameter, salMIEParameter, ingJUEParameter, salJUEParameter, ingVIEParameter, salVIEParameter, ingSABParameter, salSABParameter, ingDOMParameter, salDOMParameter, refrigerParameter, tolerncParameter, diaDescParameter, usu_UltModParameter);
        }
    
        public virtual int usp_ActualizarMarca(Nullable<int> codMarc, Nullable<int> empleado, Nullable<System.DateTime> fecha, Nullable<System.TimeSpan> hora, Nullable<int> tipo, string usu_UltMod)
        {
            var codMarcParameter = codMarc.HasValue ?
                new ObjectParameter("codMarc", codMarc) :
                new ObjectParameter("codMarc", typeof(int));
    
            var empleadoParameter = empleado.HasValue ?
                new ObjectParameter("empleado", empleado) :
                new ObjectParameter("empleado", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var horaParameter = hora.HasValue ?
                new ObjectParameter("hora", hora) :
                new ObjectParameter("hora", typeof(System.TimeSpan));
    
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(int));
    
            var usu_UltModParameter = usu_UltMod != null ?
                new ObjectParameter("usu_UltMod", usu_UltMod) :
                new ObjectParameter("usu_UltMod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ActualizarMarca", codMarcParameter, empleadoParameter, fechaParameter, horaParameter, tipoParameter, usu_UltModParameter);
        }
    
        public virtual int usp_ActualizarUserSystem(Nullable<int> codUser, string nomUser, string passUser, Nullable<int> estdUser, string usu_UltMod)
        {
            var codUserParameter = codUser.HasValue ?
                new ObjectParameter("codUser", codUser) :
                new ObjectParameter("codUser", typeof(int));
    
            var nomUserParameter = nomUser != null ?
                new ObjectParameter("nomUser", nomUser) :
                new ObjectParameter("nomUser", typeof(string));
    
            var passUserParameter = passUser != null ?
                new ObjectParameter("passUser", passUser) :
                new ObjectParameter("passUser", typeof(string));
    
            var estdUserParameter = estdUser.HasValue ?
                new ObjectParameter("estdUser", estdUser) :
                new ObjectParameter("estdUser", typeof(int));
    
            var usu_UltModParameter = usu_UltMod != null ?
                new ObjectParameter("usu_UltMod", usu_UltMod) :
                new ObjectParameter("usu_UltMod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ActualizarUserSystem", codUserParameter, nomUserParameter, passUserParameter, estdUserParameter, usu_UltModParameter);
        }
    
        public virtual ObjectResult<usp_ConsultarDiario_Result> usp_ConsultarDiario(Nullable<int> codDiar)
        {
            var codDiarParameter = codDiar.HasValue ?
                new ObjectParameter("codDiar", codDiar) :
                new ObjectParameter("codDiar", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ConsultarDiario_Result>("usp_ConsultarDiario", codDiarParameter);
        }
    
        public virtual ObjectResult<usp_ConsultarDiarioFecEmpl_Result> usp_ConsultarDiarioFecEmpl(Nullable<System.DateTime> fecha, Nullable<int> empleado)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var empleadoParameter = empleado.HasValue ?
                new ObjectParameter("empleado", empleado) :
                new ObjectParameter("empleado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ConsultarDiarioFecEmpl_Result>("usp_ConsultarDiarioFecEmpl", fechaParameter, empleadoParameter);
        }
    
        public virtual ObjectResult<usp_ConsultarDocumento_Result> usp_ConsultarDocumento(string codDoc)
        {
            var codDocParameter = codDoc != null ?
                new ObjectParameter("codDoc", codDoc) :
                new ObjectParameter("codDoc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ConsultarDocumento_Result>("usp_ConsultarDocumento", codDocParameter);
        }
    
        public virtual ObjectResult<usp_ConsultarEmpleado_Result> usp_ConsultarEmpleado(Nullable<int> codEmpleado)
        {
            var codEmpleadoParameter = codEmpleado.HasValue ?
                new ObjectParameter("codEmpleado", codEmpleado) :
                new ObjectParameter("codEmpleado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ConsultarEmpleado_Result>("usp_ConsultarEmpleado", codEmpleadoParameter);
        }
    
        public virtual ObjectResult<usp_ConsultarEmpleadoCodDoc_Result> usp_ConsultarEmpleadoCodDoc(Nullable<int> codEmpleado, string numroDoc)
        {
            var codEmpleadoParameter = codEmpleado.HasValue ?
                new ObjectParameter("codEmpleado", codEmpleado) :
                new ObjectParameter("codEmpleado", typeof(int));
    
            var numroDocParameter = numroDoc != null ?
                new ObjectParameter("numroDoc", numroDoc) :
                new ObjectParameter("numroDoc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ConsultarEmpleadoCodDoc_Result>("usp_ConsultarEmpleadoCodDoc", codEmpleadoParameter, numroDocParameter);
        }
    
        public virtual ObjectResult<usp_ConsultarHorario_Result> usp_ConsultarHorario(Nullable<int> codHorario)
        {
            var codHorarioParameter = codHorario.HasValue ?
                new ObjectParameter("codHorario", codHorario) :
                new ObjectParameter("codHorario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ConsultarHorario_Result>("usp_ConsultarHorario", codHorarioParameter);
        }
    
        public virtual ObjectResult<usp_ConsultarMarca_Result> usp_ConsultarMarca(Nullable<int> codMarc)
        {
            var codMarcParameter = codMarc.HasValue ?
                new ObjectParameter("codMarc", codMarc) :
                new ObjectParameter("codMarc", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ConsultarMarca_Result>("usp_ConsultarMarca", codMarcParameter);
        }
    
        public virtual ObjectResult<usp_ConsultarUserSystem_Result> usp_ConsultarUserSystem(Nullable<int> codUser)
        {
            var codUserParameter = codUser.HasValue ?
                new ObjectParameter("codUser", codUser) :
                new ObjectParameter("codUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ConsultarUserSystem_Result>("usp_ConsultarUserSystem", codUserParameter);
        }
    
        public virtual ObjectResult<usp_ConsultarUserSystemNom_Result> usp_ConsultarUserSystemNom(string nomUser)
        {
            var nomUserParameter = nomUser != null ?
                new ObjectParameter("nomUser", nomUser) :
                new ObjectParameter("nomUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ConsultarUserSystemNom_Result>("usp_ConsultarUserSystemNom", nomUserParameter);
        }
    
        public virtual int usp_EliminarDiario(Nullable<int> codDiar)
        {
            var codDiarParameter = codDiar.HasValue ?
                new ObjectParameter("codDiar", codDiar) :
                new ObjectParameter("codDiar", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EliminarDiario", codDiarParameter);
        }
    
        public virtual int usp_EliminarEmpleado(Nullable<int> codEmpleado)
        {
            var codEmpleadoParameter = codEmpleado.HasValue ?
                new ObjectParameter("codEmpleado", codEmpleado) :
                new ObjectParameter("codEmpleado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EliminarEmpleado", codEmpleadoParameter);
        }
    
        public virtual int usp_EliminarHorario(Nullable<int> codHorario)
        {
            var codHorarioParameter = codHorario.HasValue ?
                new ObjectParameter("codHorario", codHorario) :
                new ObjectParameter("codHorario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EliminarHorario", codHorarioParameter);
        }
    
        public virtual int usp_EliminarMarca(Nullable<int> codMarc)
        {
            var codMarcParameter = codMarc.HasValue ?
                new ObjectParameter("codMarc", codMarc) :
                new ObjectParameter("codMarc", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EliminarMarca", codMarcParameter);
        }
    
        public virtual int usp_EliminarUserSystem(Nullable<int> codUser)
        {
            var codUserParameter = codUser.HasValue ?
                new ObjectParameter("codUser", codUser) :
                new ObjectParameter("codUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EliminarUserSystem", codUserParameter);
        }
    
        public virtual int usp_InsertarDiario(Nullable<System.DateTime> fecha, Nullable<int> empleado, Nullable<int> horario, Nullable<System.TimeSpan> hIngreso, Nullable<System.TimeSpan> hSalida, Nullable<System.TimeSpan> hora1, Nullable<System.TimeSpan> hora2, Nullable<System.TimeSpan> hora3, Nullable<System.TimeSpan> hora4, Nullable<System.TimeSpan> ingrTard, Nullable<System.TimeSpan> exeRefr, Nullable<System.TimeSpan> exeJornd, string observ, string usu_Reg)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var empleadoParameter = empleado.HasValue ?
                new ObjectParameter("empleado", empleado) :
                new ObjectParameter("empleado", typeof(int));
    
            var horarioParameter = horario.HasValue ?
                new ObjectParameter("horario", horario) :
                new ObjectParameter("horario", typeof(int));
    
            var hIngresoParameter = hIngreso.HasValue ?
                new ObjectParameter("hIngreso", hIngreso) :
                new ObjectParameter("hIngreso", typeof(System.TimeSpan));
    
            var hSalidaParameter = hSalida.HasValue ?
                new ObjectParameter("hSalida", hSalida) :
                new ObjectParameter("hSalida", typeof(System.TimeSpan));
    
            var hora1Parameter = hora1.HasValue ?
                new ObjectParameter("hora1", hora1) :
                new ObjectParameter("hora1", typeof(System.TimeSpan));
    
            var hora2Parameter = hora2.HasValue ?
                new ObjectParameter("hora2", hora2) :
                new ObjectParameter("hora2", typeof(System.TimeSpan));
    
            var hora3Parameter = hora3.HasValue ?
                new ObjectParameter("hora3", hora3) :
                new ObjectParameter("hora3", typeof(System.TimeSpan));
    
            var hora4Parameter = hora4.HasValue ?
                new ObjectParameter("hora4", hora4) :
                new ObjectParameter("hora4", typeof(System.TimeSpan));
    
            var ingrTardParameter = ingrTard.HasValue ?
                new ObjectParameter("ingrTard", ingrTard) :
                new ObjectParameter("ingrTard", typeof(System.TimeSpan));
    
            var exeRefrParameter = exeRefr.HasValue ?
                new ObjectParameter("exeRefr", exeRefr) :
                new ObjectParameter("exeRefr", typeof(System.TimeSpan));
    
            var exeJorndParameter = exeJornd.HasValue ?
                new ObjectParameter("exeJornd", exeJornd) :
                new ObjectParameter("exeJornd", typeof(System.TimeSpan));
    
            var observParameter = observ != null ?
                new ObjectParameter("observ", observ) :
                new ObjectParameter("observ", typeof(string));
    
            var usu_RegParameter = usu_Reg != null ?
                new ObjectParameter("usu_Reg", usu_Reg) :
                new ObjectParameter("usu_Reg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertarDiario", fechaParameter, empleadoParameter, horarioParameter, hIngresoParameter, hSalidaParameter, hora1Parameter, hora2Parameter, hora3Parameter, hora4Parameter, ingrTardParameter, exeRefrParameter, exeJorndParameter, observParameter, usu_RegParameter);
        }
    
        public virtual int usp_InsertarEmpleado(string numroDoc, string tipoDoc, string apellidos, string nombres, Nullable<System.DateTime> fecNacimiento, string genero, string correo, string direccion, Nullable<int> telefono, Nullable<System.DateTime> fecIngreso, Nullable<int> codCargo, Nullable<int> codArea, Nullable<int> codSede, Nullable<int> codHorario, byte[] foto, string usu_Reg, Nullable<int> estado)
        {
            var numroDocParameter = numroDoc != null ?
                new ObjectParameter("numroDoc", numroDoc) :
                new ObjectParameter("numroDoc", typeof(string));
    
            var tipoDocParameter = tipoDoc != null ?
                new ObjectParameter("tipoDoc", tipoDoc) :
                new ObjectParameter("tipoDoc", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("nombres", nombres) :
                new ObjectParameter("nombres", typeof(string));
    
            var fecNacimientoParameter = fecNacimiento.HasValue ?
                new ObjectParameter("fecNacimiento", fecNacimiento) :
                new ObjectParameter("fecNacimiento", typeof(System.DateTime));
    
            var generoParameter = genero != null ?
                new ObjectParameter("genero", genero) :
                new ObjectParameter("genero", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(int));
    
            var fecIngresoParameter = fecIngreso.HasValue ?
                new ObjectParameter("fecIngreso", fecIngreso) :
                new ObjectParameter("fecIngreso", typeof(System.DateTime));
    
            var codCargoParameter = codCargo.HasValue ?
                new ObjectParameter("codCargo", codCargo) :
                new ObjectParameter("codCargo", typeof(int));
    
            var codAreaParameter = codArea.HasValue ?
                new ObjectParameter("codArea", codArea) :
                new ObjectParameter("codArea", typeof(int));
    
            var codSedeParameter = codSede.HasValue ?
                new ObjectParameter("codSede", codSede) :
                new ObjectParameter("codSede", typeof(int));
    
            var codHorarioParameter = codHorario.HasValue ?
                new ObjectParameter("codHorario", codHorario) :
                new ObjectParameter("codHorario", typeof(int));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("foto", foto) :
                new ObjectParameter("foto", typeof(byte[]));
    
            var usu_RegParameter = usu_Reg != null ?
                new ObjectParameter("usu_Reg", usu_Reg) :
                new ObjectParameter("usu_Reg", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertarEmpleado", numroDocParameter, tipoDocParameter, apellidosParameter, nombresParameter, fecNacimientoParameter, generoParameter, correoParameter, direccionParameter, telefonoParameter, fecIngresoParameter, codCargoParameter, codAreaParameter, codSedeParameter, codHorarioParameter, fotoParameter, usu_RegParameter, estadoParameter);
        }
    
        public virtual int usp_InsertarHorario(string desHorario, Nullable<System.TimeSpan> ingLUN, Nullable<System.TimeSpan> salLUN, Nullable<System.TimeSpan> ingMAR, Nullable<System.TimeSpan> salMAR, Nullable<System.TimeSpan> ingMIE, Nullable<System.TimeSpan> salMIE, Nullable<System.TimeSpan> ingJUE, Nullable<System.TimeSpan> salJUE, Nullable<System.TimeSpan> ingVIE, Nullable<System.TimeSpan> salVIE, Nullable<System.TimeSpan> ingSAB, Nullable<System.TimeSpan> salSAB, Nullable<System.TimeSpan> ingDOM, Nullable<System.TimeSpan> salDOM, Nullable<int> refriger, Nullable<int> tolernc, Nullable<int> diaDesc, string usu_Reg)
        {
            var desHorarioParameter = desHorario != null ?
                new ObjectParameter("desHorario", desHorario) :
                new ObjectParameter("desHorario", typeof(string));
    
            var ingLUNParameter = ingLUN.HasValue ?
                new ObjectParameter("ingLUN", ingLUN) :
                new ObjectParameter("ingLUN", typeof(System.TimeSpan));
    
            var salLUNParameter = salLUN.HasValue ?
                new ObjectParameter("salLUN", salLUN) :
                new ObjectParameter("salLUN", typeof(System.TimeSpan));
    
            var ingMARParameter = ingMAR.HasValue ?
                new ObjectParameter("ingMAR", ingMAR) :
                new ObjectParameter("ingMAR", typeof(System.TimeSpan));
    
            var salMARParameter = salMAR.HasValue ?
                new ObjectParameter("salMAR", salMAR) :
                new ObjectParameter("salMAR", typeof(System.TimeSpan));
    
            var ingMIEParameter = ingMIE.HasValue ?
                new ObjectParameter("ingMIE", ingMIE) :
                new ObjectParameter("ingMIE", typeof(System.TimeSpan));
    
            var salMIEParameter = salMIE.HasValue ?
                new ObjectParameter("salMIE", salMIE) :
                new ObjectParameter("salMIE", typeof(System.TimeSpan));
    
            var ingJUEParameter = ingJUE.HasValue ?
                new ObjectParameter("ingJUE", ingJUE) :
                new ObjectParameter("ingJUE", typeof(System.TimeSpan));
    
            var salJUEParameter = salJUE.HasValue ?
                new ObjectParameter("salJUE", salJUE) :
                new ObjectParameter("salJUE", typeof(System.TimeSpan));
    
            var ingVIEParameter = ingVIE.HasValue ?
                new ObjectParameter("ingVIE", ingVIE) :
                new ObjectParameter("ingVIE", typeof(System.TimeSpan));
    
            var salVIEParameter = salVIE.HasValue ?
                new ObjectParameter("salVIE", salVIE) :
                new ObjectParameter("salVIE", typeof(System.TimeSpan));
    
            var ingSABParameter = ingSAB.HasValue ?
                new ObjectParameter("ingSAB", ingSAB) :
                new ObjectParameter("ingSAB", typeof(System.TimeSpan));
    
            var salSABParameter = salSAB.HasValue ?
                new ObjectParameter("salSAB", salSAB) :
                new ObjectParameter("salSAB", typeof(System.TimeSpan));
    
            var ingDOMParameter = ingDOM.HasValue ?
                new ObjectParameter("ingDOM", ingDOM) :
                new ObjectParameter("ingDOM", typeof(System.TimeSpan));
    
            var salDOMParameter = salDOM.HasValue ?
                new ObjectParameter("salDOM", salDOM) :
                new ObjectParameter("salDOM", typeof(System.TimeSpan));
    
            var refrigerParameter = refriger.HasValue ?
                new ObjectParameter("refriger", refriger) :
                new ObjectParameter("refriger", typeof(int));
    
            var tolerncParameter = tolernc.HasValue ?
                new ObjectParameter("tolernc", tolernc) :
                new ObjectParameter("tolernc", typeof(int));
    
            var diaDescParameter = diaDesc.HasValue ?
                new ObjectParameter("diaDesc", diaDesc) :
                new ObjectParameter("diaDesc", typeof(int));
    
            var usu_RegParameter = usu_Reg != null ?
                new ObjectParameter("usu_Reg", usu_Reg) :
                new ObjectParameter("usu_Reg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertarHorario", desHorarioParameter, ingLUNParameter, salLUNParameter, ingMARParameter, salMARParameter, ingMIEParameter, salMIEParameter, ingJUEParameter, salJUEParameter, ingVIEParameter, salVIEParameter, ingSABParameter, salSABParameter, ingDOMParameter, salDOMParameter, refrigerParameter, tolerncParameter, diaDescParameter, usu_RegParameter);
        }
    
        public virtual int usp_InsertarMarca(Nullable<int> empleado, Nullable<int> horario, string usu_Reg, Nullable<System.DateTime> fecha, Nullable<int> tipo)
        {
            var empleadoParameter = empleado.HasValue ?
                new ObjectParameter("empleado", empleado) :
                new ObjectParameter("empleado", typeof(int));
    
            var horarioParameter = horario.HasValue ?
                new ObjectParameter("horario", horario) :
                new ObjectParameter("horario", typeof(int));
    
            var usu_RegParameter = usu_Reg != null ?
                new ObjectParameter("usu_Reg", usu_Reg) :
                new ObjectParameter("usu_Reg", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertarMarca", empleadoParameter, horarioParameter, usu_RegParameter, fechaParameter, tipoParameter);
        }
    
        public virtual int usp_InsertarUserSystem(string nomUser, string passUser, Nullable<int> estdUser, Nullable<System.DateTime> fec_Reg, string usu_Reg)
        {
            var nomUserParameter = nomUser != null ?
                new ObjectParameter("nomUser", nomUser) :
                new ObjectParameter("nomUser", typeof(string));
    
            var passUserParameter = passUser != null ?
                new ObjectParameter("passUser", passUser) :
                new ObjectParameter("passUser", typeof(string));
    
            var estdUserParameter = estdUser.HasValue ?
                new ObjectParameter("estdUser", estdUser) :
                new ObjectParameter("estdUser", typeof(int));
    
            var fec_RegParameter = fec_Reg.HasValue ?
                new ObjectParameter("fec_Reg", fec_Reg) :
                new ObjectParameter("fec_Reg", typeof(System.DateTime));
    
            var usu_RegParameter = usu_Reg != null ?
                new ObjectParameter("usu_Reg", usu_Reg) :
                new ObjectParameter("usu_Reg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertarUserSystem", nomUserParameter, passUserParameter, estdUserParameter, fec_RegParameter, usu_RegParameter);
        }
    
        public virtual ObjectResult<usp_ListarArea_Result> usp_ListarArea()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListarArea_Result>("usp_ListarArea");
        }
    
        public virtual ObjectResult<usp_ListarCargo_Result> usp_ListarCargo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListarCargo_Result>("usp_ListarCargo");
        }
    
        public virtual ObjectResult<usp_ListarDiario_Result> usp_ListarDiario()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListarDiario_Result>("usp_ListarDiario");
        }
    
        public virtual ObjectResult<usp_ListarDocumentos_Result> usp_ListarDocumentos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListarDocumentos_Result>("usp_ListarDocumentos");
        }
    
        public virtual ObjectResult<usp_ListarEmpleados_Result> usp_ListarEmpleados()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListarEmpleados_Result>("usp_ListarEmpleados");
        }
    
        public virtual ObjectResult<usp_ListarHorarios_Result> usp_ListarHorarios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListarHorarios_Result>("usp_ListarHorarios");
        }
    
        public virtual ObjectResult<usp_ListarMarcas_Result> usp_ListarMarcas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListarMarcas_Result>("usp_ListarMarcas");
        }
    
        public virtual ObjectResult<usp_ListarSede_Result> usp_ListarSede()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListarSede_Result>("usp_ListarSede");
        }
    
        public virtual ObjectResult<usp_ListarUserSystem_Result> usp_ListarUserSystem()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListarUserSystem_Result>("usp_ListarUserSystem");
        }
    
        public virtual int usp_RegInserDiarioMarca(Nullable<System.DateTime> fecha, Nullable<int> empleado, Nullable<int> horario, Nullable<System.TimeSpan> hora, Nullable<int> tipo, string usu_UltMod)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var empleadoParameter = empleado.HasValue ?
                new ObjectParameter("empleado", empleado) :
                new ObjectParameter("empleado", typeof(int));
    
            var horarioParameter = horario.HasValue ?
                new ObjectParameter("horario", horario) :
                new ObjectParameter("horario", typeof(int));
    
            var horaParameter = hora.HasValue ?
                new ObjectParameter("hora", hora) :
                new ObjectParameter("hora", typeof(System.TimeSpan));
    
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(int));
    
            var usu_UltModParameter = usu_UltMod != null ?
                new ObjectParameter("usu_UltMod", usu_UltMod) :
                new ObjectParameter("usu_UltMod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RegInserDiarioMarca", fechaParameter, empleadoParameter, horarioParameter, horaParameter, tipoParameter, usu_UltModParameter);
        }
    
        public virtual ObjectResult<usp_ValidarUserSystem_Result> usp_ValidarUserSystem(string nomUser, string passUser)
        {
            var nomUserParameter = nomUser != null ?
                new ObjectParameter("nomUser", nomUser) :
                new ObjectParameter("nomUser", typeof(string));
    
            var passUserParameter = passUser != null ?
                new ObjectParameter("passUser", passUser) :
                new ObjectParameter("passUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ValidarUserSystem_Result>("usp_ValidarUserSystem", nomUserParameter, passUserParameter);
        }
    
        public virtual ObjectResult<Nullable<System.TimeSpan>> usp_DiarioMetrSumJor(Nullable<int> codigo, Nullable<System.DateTime> fecIni, Nullable<System.DateTime> fecFin)
        {
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(int));
    
            var fecIniParameter = fecIni.HasValue ?
                new ObjectParameter("fecIni", fecIni) :
                new ObjectParameter("fecIni", typeof(System.DateTime));
    
            var fecFinParameter = fecFin.HasValue ?
                new ObjectParameter("fecFin", fecFin) :
                new ObjectParameter("fecFin", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.TimeSpan>>("usp_DiarioMetrSumJor", codigoParameter, fecIniParameter, fecFinParameter);
        }
    
        public virtual ObjectResult<Nullable<System.TimeSpan>> usp_DiarioMetrSumRef(Nullable<int> codigo, Nullable<System.DateTime> fecIni, Nullable<System.DateTime> fecFin)
        {
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(int));
    
            var fecIniParameter = fecIni.HasValue ?
                new ObjectParameter("fecIni", fecIni) :
                new ObjectParameter("fecIni", typeof(System.DateTime));
    
            var fecFinParameter = fecFin.HasValue ?
                new ObjectParameter("fecFin", fecFin) :
                new ObjectParameter("fecFin", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.TimeSpan>>("usp_DiarioMetrSumRef", codigoParameter, fecIniParameter, fecFinParameter);
        }
    
        public virtual ObjectResult<Nullable<System.TimeSpan>> usp_DiarioMetrSumTard(Nullable<int> codigo, Nullable<System.DateTime> fecIni, Nullable<System.DateTime> fecFin)
        {
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(int));
    
            var fecIniParameter = fecIni.HasValue ?
                new ObjectParameter("fecIni", fecIni) :
                new ObjectParameter("fecIni", typeof(System.DateTime));
    
            var fecFinParameter = fecFin.HasValue ?
                new ObjectParameter("fecFin", fecFin) :
                new ObjectParameter("fecFin", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.TimeSpan>>("usp_DiarioMetrSumTard", codigoParameter, fecIniParameter, fecFinParameter);
        }
    }
}
